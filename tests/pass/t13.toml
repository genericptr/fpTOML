# Array of Tables
# The last type that has not yet been expressed is an array of tables. 
# These can be expressed by using a table name in double brackets. Under that, 
# and until the next table or EOF are the key/values of that table. Each table 
# with the same double bracketed name will be an element in the array of tables. 
# The tables are inserted in the order encountered. A double bracketed table 
# without any key/value pairs will be considered an empty table.

[[products]]
name = "Hammer"
sku = 738594937

[[products]]

[[products]]
name = "Nail"
sku = 284758393
color = "gray"

# In JSON land, that would give you the following structure.

# {
#   "products": [
#     { "name": "Hammer", "sku": 738594937 },
#     { },
#     { "name": "Nail", "sku": 284758393, "color": "gray" }
#   ]
# }

# You can create nested arrays of tables as well. Just use the same double bracket 
# syntax on sub-tables. Each double-bracketed sub-table will belong to the most recently defined table element. 
# Normal sub-tables (not arrays) likewise belong to the most recently defined table element.

[[fruit]]
  name = "apple"

  [fruit.physical]  # subtable
    color = "red"
    shape = "round"

  [[fruit.variety]]  # nested array of tables
    name = "red delicious"

  [[fruit.variety]]
    name = "granny smith"

[[fruit]]
  name = "banana"

  [[fruit.variety]]
    name = "plantain"

# The above TOML maps to the following JSON.

# {
#   "fruit": [
#     {
#       "name": "apple",
#       "physical": {
#         "color": "red",
#         "shape": "round"
#       },
#       "variety": [
#         { "name": "red delicious" },
#         { "name": "granny smith" }
#       ]
#     },
#     {
#       "name": "banana",
#       "variety": [
#         { "name": "plantain" }
#       ]
#     }
#   ]
# }